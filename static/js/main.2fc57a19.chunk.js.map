{"version":3,"sources":["components/Container.tsx","components/Header/index.tsx","components/ActivityChart/index.tsx","components/SummaryStats/index.tsx","utils/format.ts","components/Generic/TimeDisplay.tsx","utils/url.ts","fetch/params.ts","components/SummaryTable/index.tsx","settingsContext.ts","components/RepoViewer/utils.ts","components/Generic/AddressDisplay.tsx","components/Generic/ExternalLink.tsx","components/Generic/StatusBubble.tsx","components/RepoViewer/VersionDisplay.tsx","components/RepoViewer/index.tsx","components/RegistryViewer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","props","className","children","Header","to","renderColorfulLegendText","value","style","color","fontSize","CustomTooltip","active","payload","label","reverse","map","name","key","monthNumToShort","month","mockDate","Date","Intl","DateTimeFormat","format","ActivityChart","data","activity","versions","v","i","count","packages","parseActivity","height","dataKey","stroke","tick","fill","isAnimationActive","cursor","content","formatter","maxBarSize","stackId","SummaryStats","packageCount","versionCount","cards","title","stat","Icon","GoPackage","MdUpdate","capitalize","s","charAt","toUpperCase","slice","prettyName","replace","split","join","TimeDisplay","timestamp","time","moment","calendar","fromNow","urlJoin","args","stipIpfsPrefix","ipfsDirtyHash","joinIpfsLocation","ipfsGateway","location","repoSummaryFile","activityFile","SummaryTable","repoSummary","history","useHistory","sortBy","repo","latest","registry","onClick","push","goToRepoView","logo","src","alt","version","RegistryDisplay","shortName","undefined","SettingsContext","React","createContext","txViewer","Provider","Consumer","isVersionAvailable","a","fetch","contentUri","res","text","resBody","Boolean","ok","AddressDisplay","address","makeBlockie","prettyAddress","ExternalLink","url","href","rel","target","StatusBubble","status","VersionDisplay","isLatest","useContext","id","frameBorder","RepoView","match","useState","repoData","setRepoData","isAvailable","setIsAvailable","analyze","setAnalyze","params","useEffect","filepath","getRepoFile","then","json","versionId","_version","available","x","checkVersionAvailability","sortedVersions","firstVersion","length","txHash","creation","latestVersion","versionDisplay","find","sender","RegistryView","registryData","setRegistryData","getRegistryFile","repos","blockNumber","App","setRepoSummary","setActivity","reduce","total","path","exact","component","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2fc57a19.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Container: React.FC = (props) => (\n  <div className=\"app-container\">{props.children}</div>\n);\n\nexport default Container;\n","import React from \"react\";\nimport Container from \"../Container\";\nimport \"./header.scss\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Header() {\n  return (\n    <div className=\"header_header\">\n      <Container>\n        <Link to=\"/\">\n          <h1>\n            <span className=\"dappnode\">DAppNode</span>\n            <span className=\"explorer\">EXPLORER</span>\n          </h1>\n        </Link>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n} from \"recharts\";\nimport \"./activity-chart.scss\";\nimport { Activity } from \"../../fetch/types\";\n\nconst maxHeight = 200;\nconst mainColor = \"#2fbcb2\";\nconst bColor = \"#bc7a2f\"; // Alternative strong color\nconst softColor = \"#767e86\"; // soft\nconst borderColor = \"#2c3034\"; // Very very soft\nconst packagesName = \"new packages\";\nconst versionsName = \"new versions\";\nconst fontSize = 12.8;\n\ninterface RechartsTooltipPayload {\n  fill: string; // \"#bc7a2f\";\n  dataKey: string; // \"packages\";\n  name: string; // \"packages\";\n  color: string; // \"#bc7a2f\";\n  value: number; // 0;\n}\n\nfunction renderColorfulLegendText(value: string) {\n  return <span style={{ color: softColor, fontSize }}>{value}</span>;\n}\n\nfunction CustomTooltip({\n  active,\n  payload = [],\n  label,\n}: {\n  active: boolean;\n  payload: RechartsTooltipPayload[];\n  label: string;\n}) {\n  if (!active) return null;\n  return (\n    <div className=\"custom-recharts-tooltip\">\n      <div>{label}</div>\n      <table>\n        <tbody>\n          {payload.reverse().map(({ name, color, value }) => (\n            <tr key={name} style={{ color }}>\n              <td>{value}</td>\n              <td>{name}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\ninterface ActivityData {\n  month: string; // \"Jan\";\n  versions: number; // 13;\n  packages: number; // 2;\n}\n\n/**\n * Parses a numeric month to its short english name\n * @param month 0\n * @returns Jan\n */\nfunction monthNumToShort(month: number) {\n  const mockDate = new Date(`2020-${month + 1}-1`);\n  return new Intl.DateTimeFormat(\"en-US\", { month: \"short\" }).format(mockDate);\n}\n\nfunction parseActivity(activity?: Activity): ActivityData[] {\n  if (!activity) return [];\n  return activity.versions.map((v, i) => ({\n    month: monthNumToShort(v.month),\n    versions: (activity.versions[i] || {}).count || 0,\n    packages: (activity.packages[i] || {}).count || 0,\n  }));\n}\n\nexport default function ActivityChart({ activity }: { activity?: Activity }) {\n  const data = parseActivity(activity);\n  return (\n    <div className=\"activity-chart\">\n      <div className=\"header\">\n        <div className=\"time\">LAST 12 MONTHS</div>\n        <div className=\"name\">ACTIVITY</div>\n      </div>\n\n      <ResponsiveContainer height={maxHeight}>\n        <BarChart data={data}>\n          <XAxis\n            dataKey=\"month\"\n            stroke={borderColor}\n            tick={{ fill: softColor, fontSize }}\n          />\n          <Tooltip\n            isAnimationActive={false}\n            cursor={{ fill: \"transparent\" }}\n            content={CustomTooltip}\n          />\n          <Legend formatter={renderColorfulLegendText} />\n          <Bar\n            isAnimationActive={false}\n            maxBarSize={20}\n            dataKey=\"packages\"\n            name={packagesName}\n            stackId=\"a\"\n            fill={bColor}\n          />\n          <Bar\n            isAnimationActive={false}\n            maxBarSize={20}\n            dataKey=\"versions\"\n            name={versionsName}\n            stackId=\"a\"\n            fill={mainColor}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { GoPackage } from \"react-icons/go\";\nimport { MdUpdate } from \"react-icons/md\";\nimport \"./summary-stats.scss\";\n\nexport default function SummaryStats({\n  packageCount,\n  versionCount,\n}: {\n  packageCount: number;\n  versionCount: number;\n}) {\n  const cards = [\n    { title: \"Published packages\", stat: packageCount, Icon: GoPackage },\n    { title: \"Published versions\", stat: versionCount, Icon: MdUpdate },\n  ];\n\n  return (\n    <div className=\"summary-stats\">\n      {cards.map(({ title, stat, Icon }) => (\n        <div key={title} className=\"card\">\n          <span className=\"title\">{title}</span>\n          <span className=\"stat\">{stat}</span>\n          <span className=\"icon\">\n            <Icon />\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n","/**\n * Capitalizes a string\n * @param string = \"hello world\"\n * @returns \"Hello world\"\n */\nfunction capitalize(s: string): string {\n  if (!s || typeof s !== \"string\") return s;\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/**\n * Pretifies a package name\n * \"bitcoin\" => \"Bitcoin\"\n * \"raiden-testnet\" => \"Raiden Testnet\"\n *\n * @param name ENS name\n * @returns pretty name\n */\nexport function prettyName(name: string): string {\n  return (\n    name\n      // Convert all \"-\" and \"_\" to spaces\n      .replace(/-/g, \" \")\n      .replace(/_/g, \" \")\n      .replace(/\\./g, \" \")\n      .split(\" \")\n      .map(capitalize)\n      .join(\" \")\n  );\n}\n\n/**\n * Pretifies a ENS name\n * \"bitcoin.dnp.dappnode.eth\" => \"Bitcoin\"\n * \"raiden-testnet.dnp.dappnode.eth\" => \"Raiden Testnet\"\n *\n * @param name ENS name\n * @returns pretty name\n */\nexport function parseRepoName(\n  name: string\n): { registry: string; prettyName: string } {\n  const [shortName, registry] = name.split(/\\.(.+)/);\n\n  return {\n    prettyName: prettyName(shortName),\n    registry,\n  };\n}\n","import React from \"react\";\nimport moment from \"moment\";\n\n/**\n * Display last time an event happened nicely\n */\nexport function TimeDisplay({ timestamp }: { timestamp?: number }) {\n  if (!timestamp) return <div>-</div>;\n  const time = moment(timestamp * 1000);\n  return (\n    <>\n      <div>{time.calendar()}</div>\n      <div className=\"light\">{time.fromNow()}</div>\n    </>\n  );\n}\n","/**\n * Joins multiple url parts safely\n * - Does not break the protocol double slash //\n * - Cleans double slashes at any point\n * @param args (\"http://ipfs.io\", \"ipfs\", \"Qm\")\n * @return \"http://ipfs.io/ipfs/Qm\"\n */\nexport function urlJoin(...args: string[]): string {\n  return args.join(\"/\").replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\n/**\n * Clean an IPFS hash of prefixes and suffixes commonly found\n * in both gateway URLs and content URLs\n * @param ipfsDirtyHash\n */\nexport function stipIpfsPrefix(ipfsDirtyHash: string): string {\n  return (\n    ipfsDirtyHash\n      // Trim ending /ipfs/ tag\n      // \"site.io:8080//ipfs//\" => \"site.io:8080\"\n      .replace(/\\/*ipfs\\/*$/, \"\")\n      // Trim starting /ipfs/, ipfs: tag\n      // \"/ipfs/Qm\" => \"Qm\"\n      .replace(/^\\/*ipfs[/:]*/, \"\")\n  );\n}\n\n/**\n * Returns a joined IPFS location given an IPFS gateway and an IPFS path\n * This util makes sure the url is properly joined, and that it contains\n * the \"ipfs\" route only once, stripping it from the gateway and the location\n * @param ipfsGateway \"https://ipfs.io\"\n * @param location \"Qmzz\"\n * @return \"https://ipfs.io/ipfs/Qmzz/artifact.json\"\n */\nexport function joinIpfsLocation(\n  ipfsGateway: string,\n  location: string\n): string {\n  return urlJoin(stipIpfsPrefix(ipfsGateway), \"ipfs\", stipIpfsPrefix(location));\n}\n","/**\n * Common params between node and browser\n */\n\nexport const rootDirFromNode = `public`;\nexport const rootUrlFromBrowser = `./`;\n\n// Partial common paths\nexport const dataDir = \"data\";\nexport const avatarDir = \"avatar\";\nexport const registriesFile = `${dataDir}/registries.json`;\nexport const repoSummaryFile = `${dataDir}/summary.json`;\nexport const activityFile = `${dataDir}/activity.json`;\nexport const getRegistryFile = (registry: string) =>\n  `${dataDir}/${registry}.json`;\nexport const getRepoFile = (registry: string, repo: string) =>\n  `${dataDir}/${registry}/${repo}.json`;\nexport const getAvatarFile = (registry: string, repo: string) =>\n  `${avatarDir}/${registry}/${repo}.png`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { prettyName } from \"../../utils/format\";\nimport { RepoSummary } from \"../../fetch/types\";\nimport { sortBy } from \"lodash\";\nimport { TimeDisplay } from \"../Generic/TimeDisplay\";\nimport \"./summary-table.scss\";\nimport { urlJoin } from \"../../utils/url\";\nimport { rootUrlFromBrowser } from \"../../fetch/params\";\n\nexport default function SummaryTable({\n  repoSummary,\n}: {\n  repoSummary: RepoSummary[];\n}) {\n  const history = useHistory();\n  function goToRepoView(registry: string, repo: string) {\n    history.push(`/${registry}/${repo}`);\n  }\n\n  return (\n    <table className=\"summary-table\">\n      <thead>\n        <tr>\n          <th className=\"logo\"></th>\n          <th>Name</th>\n          <th>Last updated</th>\n          <th>Last version</th>\n          <th>Registry</th>\n        </tr>\n      </thead>\n      <tbody>\n        {sortBy(repoSummary, (repo) => (repo.latest || {}).timestamp || 0)\n          .reverse()\n          .map(({ name, registry, versionCount, latest }) => (\n            <tr\n              key={name + registry}\n              onClick={() => goToRepoView(registry, name)}\n            >\n              <td className=\"logo\">\n                {latest && latest.logo && (\n                  <img\n                    src={urlJoin(rootUrlFromBrowser, latest.logo)}\n                    alt=\"logo\"\n                  />\n                )}\n              </td>\n              <td>{prettyName(name)}</td>\n              <td>\n                <TimeDisplay timestamp={latest?.timestamp} />\n              </td>\n              <td>\n                <div>{latest?.version}</div>\n                <div className=\"light\">{versionCount}</div>{\" \"}\n              </td>\n              <td>\n                <RegistryDisplay registry={registry} />\n              </td>\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  );\n}\n\n/**\n * Display registry as a colored pill by name\n */\nfunction RegistryDisplay({ registry }: { registry: string }) {\n  const shortName =\n    registry === \"dnp.dappnode.eth\"\n      ? \"dnp\"\n      : registry === \"public.dappnode.eth\"\n      ? \"public\"\n      : undefined;\n  return (\n    <div className=\"registry\">\n      <span className={shortName}>{shortName || registry}</span>\n    </div>\n  );\n}\n","import React from \"react\";\n\ninterface Settings {\n  ipfsGateway: string;\n  txViewer: string;\n}\n\nconst SettingsContext = React.createContext<Settings>({\n  ipfsGateway: \"http://ipfs.infura.io\",\n  txViewer: \"https://etherscan.io/tx\",\n});\n\nexport const SettingsProvider = SettingsContext.Provider;\nexport const SettingsConsumer = SettingsContext.Consumer;\n\nexport default SettingsContext;\n","import { NewVersion } from \"../../fetch/apm\";\nimport { joinIpfsLocation } from \"../../utils/url\";\n\n/**\n * Returns a shortened address\n * @param address \"0x12345678901234567890123456789\"\n * @returns \"0x1234...6789\"\n */\nexport function prettyAddress(address: string) {\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n}\n\n/**\n * Check if a version hash is available by calling an IFPS gateway\n * @param version\n * @param ipfsGateway\n */\nexport async function isVersionAvailable(\n  version: NewVersion,\n  ipfsGateway: string\n): Promise<boolean> {\n  const res = await fetch(joinIpfsLocation(ipfsGateway, version.contentUri));\n  const resBody = await res.text();\n  return Boolean(res.ok && resBody);\n}\n","import React from \"react\";\nimport { prettyAddress } from \"../RepoViewer/utils\";\nimport makeBlockie from \"ethereum-blockies-base64\";\nimport \"./addressDisplay.scss\";\n\nexport function AddressDisplay({ address }: { address?: string }) {\n  return (\n    <div className=\"address-display\">\n      {address && <img className=\"blockie\" src={makeBlockie(address)} alt=\"\" />}\n      <span>{address ? prettyAddress(address) : \"\"}</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { MdOpenInNew } from \"react-icons/md\";\nimport \"./externalLink.scss\";\n\nexport function ExternalLink({ url }: { url: string }) {\n  return (\n    <a\n      className=\"external-link\"\n      href={url}\n      rel=\"noopener noreferrer\"\n      target=\"_blank\"\n    >\n      <MdOpenInNew />\n    </a>\n  );\n}\n","import React from \"react\";\nimport { FaCircle } from \"react-icons/fa\";\nimport \"./statusBubble.scss\";\n\nexport function StatusBubble({ ok }: { ok?: boolean }) {\n  const status = ok === true ? \"ok\" : ok === false ? \"nok\" : \"\";\n  return (\n    <span className={`status-bubble ${status}`}>\n      <FaCircle />\n    </span>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { NewVersion } from \"../../fetch/apm\";\nimport SettingsContext from \"../../settingsContext\";\nimport { joinIpfsLocation } from \"../../utils/url\";\nimport \"./versionDisplay.scss\";\n\nexport default function VersionDisplay({\n  version,\n  isLatest,\n}: {\n  version: NewVersion;\n  isLatest: boolean;\n}) {\n  const { ipfsGateway } = useContext(SettingsContext);\n  const { contentUri } = version;\n\n  return (\n    <div className=\"version-display\">\n      <div className=\"header\">\n        <div className=\"title\">\n          {version.version} {isLatest ? \"(latest)\" : \"\"}\n        </div>\n        <div className=\"contentUri\">{contentUri}</div>\n      </div>\n      <iframe\n        className=\"content-preview\"\n        name=\"version-content\"\n        id=\"version-content\"\n        title=\"version-content\"\n        src={joinIpfsLocation(ipfsGateway, contentUri)}\n        frameBorder={0}\n      ></iframe>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { RouteComponentProps, useHistory, Link } from \"react-router-dom\";\nimport { sortBy } from \"lodash\";\nimport { rootUrlFromBrowser, getRepoFile } from \"../../fetch/params\";\nimport { LocalRepo } from \"../../fetch/types\";\nimport SettingsContext from \"../../settingsContext\";\nimport { prettyName } from \"../../utils/format\";\nimport { isVersionAvailable } from \"./utils\";\nimport {\n  StatusBubble,\n  TimeDisplay,\n  ExternalLink,\n  AddressDisplay,\n} from \"../Generic\";\nimport \"./repoViewer.scss\";\nimport VersionDisplay from \"./VersionDisplay\";\nimport { urlJoin, joinIpfsLocation } from \"../../utils/url\";\n\ninterface VersionAvailable {\n  [version: string]: boolean;\n}\n\nexport const RepoView: React.FC<RouteComponentProps<{\n  registry: string;\n  repo: string;\n  version: string;\n}>> = ({ match }) => {\n  const [repoData, setRepoData] = useState<LocalRepo>();\n  const [isAvailable, setIsAvailable] = useState<VersionAvailable>({});\n  const [analyze, setAnalyze] = useState(false);\n\n  const history = useHistory();\n  const { ipfsGateway, txViewer } = useContext(SettingsContext);\n\n  const { registry, repo, version } = match.params;\n\n  useEffect(() => {\n    const filepath = getRepoFile(registry, repo);\n    fetch(urlJoin(rootUrlFromBrowser, filepath))\n      .then((res) => res.json())\n      .then(setRepoData);\n  }, [registry, repo]);\n\n  useEffect(() => {\n    async function checkVersionAvailability() {\n      if (repoData) {\n        const versions = sortBy(\n          repoData.versions,\n          (version) => version.versionId\n        ).reverse();\n        for (const _version of versions) {\n          const available = await isVersionAvailable(_version, ipfsGateway);\n          setIsAvailable((x) => ({ ...x, [_version.version]: available }));\n        }\n      }\n    }\n    if (analyze) checkVersionAvailability();\n  }, [ipfsGateway, repoData, analyze]);\n\n  function selectVersion(_version: string) {\n    history.push(`/${registry}/${repo}/${_version}`);\n  }\n\n  if (!repoData) return <p className=\"soft\">Loading...</p>;\n\n  const sortedVersions = sortBy(\n    repoData.versions,\n    (version) => version.versionId\n  ).reverse();\n\n  // Add another \"Creation\" version if the creation tx is different\n  const firstVersion = sortedVersions[sortedVersions.length - 1];\n  if (firstVersion.txHash && repoData.creation.txHash !== firstVersion.txHash) {\n    sortedVersions.push({\n      version: \"Creation\",\n      versionId: -1,\n      contentUri: \"\",\n      ...repoData.creation,\n    });\n  }\n\n  const latestVersion = sortedVersions[0];\n  const versionDisplay =\n    sortedVersions.find((v) => v.version === version) || latestVersion;\n  const isLatest = versionDisplay.versionId === latestVersion.versionId;\n\n  return (\n    <>\n      <div>\n        <div className=\"repo-name\">{prettyName(match.params.repo)}</div>\n        <Link to={`/${registry}`}>\n          <div className=\"registry\">{match.params.registry}</div>\n        </Link>\n      </div>\n\n      <VersionDisplay version={versionDisplay} isLatest={isLatest} />\n\n      <table className=\"summary-table\">\n        <thead>\n          <tr>\n            <th>Version</th>\n            <th>Age</th>\n            <th onClick={() => setAnalyze(true)}>Content</th>\n            <th>From</th>\n            <th>Txn</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedVersions.map(\n            ({ version, contentUri, txHash, timestamp, sender }) => (\n              <tr key={version} onClick={() => selectVersion(version)}>\n                <td>{version}</td>\n                <td>\n                  <TimeDisplay timestamp={timestamp} />\n                </td>\n                <td className=\"content\">\n                  {analyze && <StatusBubble ok={isAvailable[version]} />}\n                  {contentUri && (\n                    <ExternalLink\n                      url={joinIpfsLocation(ipfsGateway, contentUri)}\n                    />\n                  )}\n                </td>\n                <td>\n                  <AddressDisplay address={sender} />\n                </td>\n                <td className=\"txn\">\n                  {txHash && <ExternalLink url={urlJoin(txViewer, txHash)} />}\n                </td>\n              </tr>\n            )\n          )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\nimport { sortBy } from \"lodash\";\nimport SettingsContext from \"../../settingsContext\";\nimport { getRegistryFile, rootUrlFromBrowser } from \"../../fetch/params\";\nimport { LocalRegistry } from \"../../fetch/types\";\nimport { prettyName } from \"../../utils/format\";\nimport { TimeDisplay, AddressDisplay, ExternalLink } from \"../Generic\";\nimport { urlJoin } from \"../../utils/url\";\n\nexport const RegistryView: React.FC<RouteComponentProps<{\n  registry: string;\n}>> = ({ match }) => {\n  const [registryData, setRegistryData] = useState<LocalRegistry>();\n\n  const history = useHistory();\n  const { txViewer } = useContext(SettingsContext);\n  const { registry } = match.params;\n\n  useEffect(() => {\n    const filepath = getRegistryFile(registry);\n    fetch(urlJoin(rootUrlFromBrowser, filepath))\n      .then((res) => res.json())\n      .then(setRegistryData);\n  }, [registry]);\n\n  function goToRepoView(repo: string) {\n    history.push(`/${registry}/${repo}`);\n  }\n\n  if (!registryData) return <p className=\"soft\">Loading...</p>;\n\n  return (\n    <>\n      <div className=\"repo-name\">{registry}</div>\n      <table className=\"summary-table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Created</th>\n            <th>Owner</th>\n            <th>Txn</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortBy(registryData.repos, (repo) => repo.blockNumber || 0)\n            .reverse()\n            .map(({ name, timestamp, sender, txHash }) => (\n              <tr key={name} onClick={() => goToRepoView(name)}>\n                <td>{prettyName(name)}</td>\n                <td>\n                  <TimeDisplay timestamp={timestamp} />\n                </td>\n                <td>\n                  <AddressDisplay address={sender} />\n                </td>\n                <td>\n                  <ExternalLink url={`${txViewer}/${txHash}`} />\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport ActivityChart from \"./components/ActivityChart\";\nimport SummaryStats from \"./components/SummaryStats\";\nimport SummaryTable from \"./components/SummaryTable\";\nimport { RepoView } from \"./components/RepoViewer\";\nimport {\n  repoSummaryFile,\n  rootUrlFromBrowser,\n  activityFile,\n} from \"./fetch/params\";\nimport { RepoSummary, Activity } from \"./fetch/types\";\nimport { RegistryView } from \"./components/RegistryViewer\";\nimport { urlJoin } from \"./utils/url\";\n\n// fetchFromBrowser(new ethers.providers.InfuraProvider());\n\nexport default function App() {\n  const [repoSummary, setRepoSummary] = useState<RepoSummary[]>([]);\n  const [activity, setActivity] = useState<Activity>();\n\n  useEffect(() => {\n    fetch(urlJoin(rootUrlFromBrowser, repoSummaryFile))\n      .then((res) => res.json())\n      .then(setRepoSummary);\n\n    fetch(urlJoin(rootUrlFromBrowser, activityFile))\n      .then((res) => res.json())\n      .then(setActivity);\n  }, []);\n\n  const packageCount = repoSummary.length;\n  const versionCount = repoSummary.reduce(\n    (total, repo) => total + repo.versionCount,\n    0\n  );\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"app-body\">\n        {/* Home */}\n        <Route path=\"/\" exact>\n          <ActivityChart activity={activity} />\n          <SummaryStats\n            packageCount={packageCount}\n            versionCount={versionCount}\n          />\n          <SummaryTable repoSummary={repoSummary} />\n        </Route>\n        <Route path=\"/:registry\" exact component={RegistryView} />\n        <Route path=\"/:registry/:repo/:version?\" component={RepoView} />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport \"./style.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}